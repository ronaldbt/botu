version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: botu-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: botu
      POSTGRES_USER: botu
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-botu_secure_password_2024}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - botu-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U botu -d botu"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: botu-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://botu:${POSTGRES_PASSWORD:-botu_secure_password_2024}@postgres:5432/botu
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this-in-production}
      ENVIRONMENT: production
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - botu-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.botut.net`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: botu-frontend
    restart: unless-stopped
    ports:
      - "3000:80"  # Exponer temporalmente para acceso directo
    depends_on:
      - backend
    networks:
      - botu-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`botut.net`) || Host(`www.botut.net`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.docker.network=botu_botu-network"

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    container_name: botu-traefik
    restart: unless-stopped
    command:
      - "--configfile=/etc/traefik/traefik.yml"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
      - ./dynamic.yml:/etc/traefik/dynamic.yml:ro
      - traefik_data:/letsencrypt
    networks:
      - botu-network

volumes:
  postgres_data:
    driver: local
  traefik_data:
    driver: local

networks:
  botu-network:
    driver: bridge
