# src/bitcoin_2024_backtest.py
# Backtesting completo de Bitcoin para el a√±o 2024 usando datos hist√≥ricos reales

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import requests
import time
from utils import log

class Bitcoin2024Backtest:
    def __init__(self, initial_capital=1000):
        self.initial_capital = initial_capital
        self.current_capital = initial_capital
        self.trades = []
        self.equity_curve = [initial_capital]
        
    def get_historical_data_2024(self):
        """
        Obtiene datos hist√≥ricos de Bitcoin para todo 2024 usando Binance API
        """
        print("üìä Obteniendo datos hist√≥ricos de Bitcoin para 2024...")
        
        # Fechas para 2024 completo
        start_time = int(datetime(2024, 1, 1).timestamp() * 1000)
        end_time = int(datetime(2024, 12, 31, 23, 59, 59).timestamp() * 1000)
        
        all_klines = []
        current_start = start_time
        
        # Binance l√≠mite: 1000 velas por request
        # Para 4h en un a√±o: ~2190 velas, necesitamos m√∫ltiples requests
        interval = "4h"
        limit = 1000
        
        while current_start < end_time:
            try:
                url = "https://api.binance.com/api/v3/klines"
                params = {
                    'symbol': 'BTCUSDT',
                    'interval': interval,
                    'startTime': current_start,
                    'endTime': end_time,
                    'limit': limit
                }
                
                response = requests.get(url, params=params)
                response.raise_for_status()
                
                klines = response.json()
                if not klines:
                    break
                    
                all_klines.extend(klines)
                
                # Actualizar start_time para siguiente request
                last_timestamp = klines[-1][0]
                current_start = last_timestamp + 1
                
                print(f"‚úÖ Obtenidas {len(klines)} velas hasta {datetime.fromtimestamp(last_timestamp/1000).strftime('%Y-%m-%d')}")
                
                # Rate limit: esperar un poco entre requests
                time.sleep(0.1)
                
            except Exception as e:
                print(f"‚ùå Error obteniendo datos: {e}")
                break
        
        # Convertir a DataFrame
        df = pd.DataFrame(all_klines, columns=[
            'timestamp', 'open', 'high', 'low', 'close', 'volume',
            'close_time', 'quote_volume', 'trades', 'taker_buy_base', 'taker_buy_quote', 'ignore'
        ])
        
        # Convertir tipos
        for col in ['open', 'high', 'low', 'close', 'volume']:
            df[col] = pd.to_numeric(df[col])
        
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        
        print(f"üéØ DATOS 2024 COMPLETOS:")
        print(f"   üìÖ Per√≠odo: {df.index[0]} a {df.index[-1]}")
        print(f"   üìä Total velas: {len(df)}")
        print(f"   üí∞ Precio inicial: ${df['open'].iloc[0]:,.2f}")
        print(f"   üí∞ Precio final: ${df['close'].iloc[-1]:,.2f}")
        print(f"   üìà Cambio anual: {((df['close'].iloc[-1] / df['open'].iloc[0]) - 1) * 100:.2f}%")
        print(f"   üîù M√°ximo: ${df['high'].max():,.2f}")
        print(f"   üìâ M√≠nimo: ${df['low'].min():,.2f}")
        print()
        
        return df
    
    def backtest_2024_complete(self):
        """
        Backtesting completo del a√±o 2024
        """
        print("üöÄ BACKTESTING BITCOIN - A√ëO 2024 COMPLETO")
        print("="*80)
        print("üìà NOTA: 2024 fue un a√±o de recuperaci√≥n post-crypto winter")
        print("üöÄ Bitcoin subi√≥ significativamente desde los m√≠nimos de 2022")
        print("üß™ Probando el sistema de patrones U en mercado alcista")
        print("="*80)
        
        df = self.get_historical_data_2024()
        if df.empty:
            print("‚ùå No se pudieron obtener datos hist√≥ricos de 2024")
            return
            
        # Configuraci√≥n del sistema para 2024
        profit_target = 0.12  # 12% objetivo
        stop_loss = 0.05      # 5% stop loss
        max_hold_periods = 100  # M√°ximo 100 per√≠odos (400h = ~16 d√≠as)
        
        # Ventanas de an√°lisis m√°s peque√±as para capturar m√°s oportunidades
        window_size = 150  # Ventana de an√°lisis
        step_size = 10     # Avance de ventana (m√°s peque√±o = m√°s oportunidades)
        
        total_windows = (len(df) - window_size) // step_size
        print(f"üîÑ Analizando {total_windows} ventanas de trading en 2024...")
        print("‚ö° Configuraci√≥n: 12% profit target | 5% stop loss | Max 16 d√≠as holding")
        print()
        
        # Trackear performance mensual
        monthly_performance = {}
        monthly_trades = {}
        
        for window_idx in range(total_windows):
            start_idx = window_idx * step_size
            end_idx = start_idx + window_size
            
            if end_idx >= len(df) - 50:  # Dejar datos para simular trades
                break
            
            # Datos para an√°lisis
            analysis_df = df.iloc[start_idx:end_idx].copy()
            
            # Detectar se√±ales usando nuestro algoritmo
            signals = self._detect_u_patterns_2024(analysis_df)
            
            for signal in signals:
                # Simular trade en datos futuros
                trade_result = self._simulate_trade_2024(
                    df, signal, end_idx, profit_target, stop_loss, max_hold_periods
                )
                
                if trade_result:
                    self.trades.append(trade_result)
                    old_capital = self.current_capital
                    self.current_capital *= (1 + trade_result['return_pct'])
                    self.equity_curve.append(self.current_capital)
                    
                    # Trackear por mes
                    month_key = trade_result['entry_time'].strftime('%Y-%m')
                    if month_key not in monthly_performance:
                        monthly_performance[month_key] = []
                        monthly_trades[month_key] = 0
                    
                    monthly_performance[month_key].append(trade_result['return_pct'] * 100)
                    monthly_trades[month_key] += 1
                    
                    print(f"üí´ Trade #{len(self.trades)} - {trade_result['entry_time'].strftime('%Y-%m-%d')}")
                    print(f"   üü° ${old_capital:,.0f} ‚Üí ${self.current_capital:,.0f} ({trade_result['return_pct']*100:+.2f}%)")
        
        self._generate_2024_report(monthly_performance, monthly_trades, df)
        
    def _detect_u_patterns_2024(self, df):
        """
        Detecta patrones U optimizado para mercado alcista de 2024
        """
        signals = []
        
        # Detectar m√≠nimos significativos con par√°metros para bull market
        significant_lows = self._detect_lows_2024(df, window=8, min_depth_pct=0.03)  # 3% m√≠nimo
        
        if not significant_lows:
            return signals
            
        # Analizar m√∫ltiples m√≠nimos (no solo el √∫ltimo)
        for low in significant_lows[-3:]:  # √öltimos 3 m√≠nimos
            min_idx = low['index']
            
            # ATR y factor din√°mico
            atr = self._calculate_atr_simple(df)
            current_price = df.iloc[-1]['close']
            
            # Factor optimizado para bull market
            dynamic_factor = self._calculate_rupture_factor_bull(atr, current_price)
            nivel_ruptura = low['high'] * dynamic_factor
            
            # Condiciones adaptadas para bull market
            if len(df) - min_idx > 5 and len(df) - min_idx < 60:
                recent_slope = self._calculate_slope(df.iloc[-8:]['close'].values)
                pre_slope = self._calculate_slope(df.iloc[max(0, min_idx-8):min_idx]['close'].values)
                
                # Condiciones m√°s permisivas para bull market
                conditions = [
                    pre_slope < -0.15,  # Menos restrictivo para bull market
                    current_price > nivel_ruptura * 0.95,  # M√°s permisivo (95% vs 98%)
                    recent_slope > -0.05,  # Permitir momentum menos positivo
                    low['depth'] >= 0.03,  # Al menos 3% de profundidad
                ]
                
                if all(conditions):
                    signals.append({
                        'timestamp': df.index[-1],
                        'entry_price': nivel_ruptura,
                        'signal_strength': abs(pre_slope),
                        'min_price': low['low'],
                        'pattern_width': len(df) - min_idx,
                        'atr': atr,
                        'dynamic_factor': dynamic_factor,
                        'depth': low['depth']
                    })
                    break  # Solo una se√±al por ventana
                    
        return signals
    
    def _detect_lows_2024(self, df, window=8, min_depth_pct=0.03):
        """Detecta m√≠nimos para bull market de 2024"""
        lows = []
        
        for i in range(window, len(df) - window):
            current_low = df.iloc[i]['low']
            
            window_slice = df.iloc[i-window:i+window+1]
            if current_low == window_slice['low'].min():
                local_high = window_slice['high'].max()
                depth = (local_high - current_low) / local_high
                
                if depth >= min_depth_pct:
                    lows.append({
                        'index': i,
                        'timestamp': df.index[i],
                        'low': current_low,
                        'high': df.iloc[i]['high'],
                        'close': df.iloc[i]['close'],
                        'volume': df.iloc[i]['volume'],
                        'depth': depth
                    })
        
        return lows
    
    def _calculate_rupture_factor_bull(self, atr, price, base_factor=1.02):
        """Factor de ruptura para bull market (m√°s agresivo)"""
        atr_pct = atr / price
        
        # M√°s agresivo en bull market
        if atr_pct < 0.02:
            factor = base_factor
        elif atr_pct < 0.05:
            factor = base_factor + (atr_pct * 0.5)  # M√°s agresivo
        else:
            factor = min(base_factor + (atr_pct * 0.8), 1.08)  # M√°ximo 8%
        
        return max(factor, 1.02)  # M√≠nimo 2%
    
    def _calculate_atr_simple(self, df, period=14):
        """Calcula ATR simplificado"""
        tr_values = []
        for i in range(1, len(df)):
            high = df.iloc[i]['high']
            low = df.iloc[i]['low']
            prev_close = df.iloc[i-1]['close']
            
            tr = max(
                high - low,
                abs(high - prev_close),
                abs(low - prev_close)
            )
            tr_values.append(tr)
        
        return np.mean(tr_values[-period:]) if tr_values else df.iloc[-1]['high'] - df.iloc[-1]['low']
    
    def _calculate_slope(self, values):
        """Calcula pendiente"""
        if len(values) < 2:
            return 0
        x = np.arange(len(values))
        return np.polyfit(x, values, 1)[0]
    
    def _simulate_trade_2024(self, df, signal, start_idx, profit_target, stop_loss, max_hold):
        """Simula trade en 2024"""
        entry_price = signal['entry_price']
        entry_time = signal['timestamp']
        
        future_data = df.iloc[start_idx:start_idx + max_hold + 50]
        if len(future_data) < 5:
            return None
            
        target_price = entry_price * (1 + profit_target)
        stop_price = entry_price * (1 - stop_loss)
        
        max_profit = 0
        max_drawdown = 0
        
        for i, (timestamp, row) in enumerate(future_data.iterrows()):
            if i > max_hold:
                exit_price = row['close']
                exit_reason = "MAX_HOLD"
                exit_time = timestamp
                break
                
            high = row['high']
            low = row['low']
            close = row['close']
            
            current_profit = (high - entry_price) / entry_price
            current_loss = (entry_price - low) / entry_price
            max_profit = max(max_profit, current_profit)
            max_drawdown = max(max_drawdown, current_loss)
            
            if high >= target_price:
                exit_price = target_price
                exit_reason = "TAKE_PROFIT"
                exit_time = timestamp
                break
                
            if low <= stop_price:
                exit_price = stop_price
                exit_reason = "STOP_LOSS"
                exit_time = timestamp
                break
                
        else:
            exit_price = future_data.iloc[-1]['close']
            exit_reason = "END_OF_DATA"
            exit_time = future_data.index[-1]
        
        return_pct = (exit_price - entry_price) / entry_price
        hold_hours = int((exit_time - entry_time).total_seconds() / 3600)
        
        return {
            'trade_number': len(self.trades) + 1,
            'entry_time': entry_time,
            'exit_time': exit_time,
            'entry_price': entry_price,
            'exit_price': exit_price,
            'return_pct': return_pct,
            'hold_hours': hold_hours,
            'exit_reason': exit_reason,
            'max_profit': max_profit,
            'max_drawdown': max_drawdown,
            'signal_strength': signal['signal_strength'],
            'depth': signal['depth']
        }
    
    def _generate_2024_report(self, monthly_performance, monthly_trades, df):
        """
        Genera reporte completo del a√±o 2024
        """
        print()
        print("üìä REPORTE COMPLETO - BITCOIN 2024 (BULL MARKET RECOVERY)")
        print("="*80)
        
        if not self.trades:
            print("‚ö†Ô∏è No se generaron trades durante 2024")
            print("üîç En un mercado alcista, las oportunidades U pueden ser menos frecuentes")
            return
            
        # Estad√≠sticas generales
        total_trades = len(self.trades)
        winning_trades = [t for t in self.trades if t['return_pct'] > 0]
        losing_trades = [t for t in self.trades if t['return_pct'] <= 0]
        
        win_rate = len(winning_trades) / total_trades * 100
        total_return = (self.current_capital / self.initial_capital - 1) * 100
        
        # Comparar con Buy & Hold
        btc_start_price = df['open'].iloc[0]
        btc_end_price = df['close'].iloc[-1]
        buy_hold_return = (btc_end_price / btc_start_price - 1) * 100
        
        print(f"üèÜ RESUMEN EJECUTIVO 2024:")
        print(f"   üíµ Capital inicial: ${self.initial_capital:,.2f}")
        print(f"   üí∞ Capital final: ${self.current_capital:,.2f}")
        print(f"   üìà Sistema U: {total_return:+.2f}%")
        print(f"   üìâ Buy & Hold BTC: {buy_hold_return:+.2f}%")
        print(f"   üéØ Outperformance: {total_return - buy_hold_return:+.2f} puntos porcentuales")
        print()
        
        print(f"üìä ESTAD√çSTICAS DE TRADING:")
        print(f"   üî¢ Total trades: {total_trades}")
        print(f"   ‚úÖ Ganadores: {len(winning_trades)} ({win_rate:.1f}%)")
        print(f"   ‚ùå Perdedores: {len(losing_trades)} ({100-win_rate:.1f}%)")
        print(f"   üìà Retorno promedio: {np.mean([t['return_pct'] for t in self.trades]) * 100:.2f}%")
        print(f"   üöÄ Mejor trade: {max([t['return_pct'] for t in self.trades]) * 100:.2f}%")
        print(f"   üí• Peor trade: {min([t['return_pct'] for t in self.trades]) * 100:.2f}%")
        print()
        
        # Performance mensual
        print("üìÖ PERFORMANCE MENSUAL 2024:")
        print("-" * 50)
        for month in sorted(monthly_performance.keys()):
            if month in monthly_performance:
                monthly_returns = monthly_performance[month]
                avg_return = np.mean(monthly_returns)
                trade_count = monthly_trades[month]
                total_monthly = sum(monthly_returns)
                
                status = "üü¢" if total_monthly > 0 else "üî¥" if total_monthly < 0 else "üü°"
                
                print(f"   {status} {month}: {trade_count} trades | Avg: {avg_return:+.2f}% | Total: {total_monthly:+.2f}%")
        print()
        
        # Trades detallados (solo primeros 10 para no saturar)
        print("üí∞ PRIMEROS 10 TRADES DETALLADOS:")
        print("-" * 80)
        
        for i, trade in enumerate(self.trades[:10]):
            status = "‚úÖ" if trade['return_pct'] > 0 else "‚ùå"
            print(f"{status} #{trade['trade_number']} | {trade['entry_time'].strftime('%Y-%m-%d')} | ")
            print(f"   ${trade['entry_price']:,.0f} ‚Üí ${trade['exit_price']:,.0f} | ")
            print(f"   {trade['return_pct']*100:+.2f}% | {trade['hold_hours']}h | {trade['exit_reason']}")
        
        if len(self.trades) > 10:
            print(f"   ... y {len(self.trades) - 10} trades m√°s")
        print()
        
        # Evaluaci√≥n final
        print("üéØ EVALUACI√ìN FINAL 2024:")
        if total_return > buy_hold_return and total_return > 50:
            print("üü¢ EXCELENTE: Sistema super√≥ significativamente a Buy & Hold")
        elif total_return > buy_hold_return:
            print("üü° BUENO: Sistema super√≥ a Buy & Hold en bull market")
        elif total_return > 20:
            print("üü° ACEPTABLE: Sistema gener√≥ retornos positivos s√≥lidos")
        else:
            print("üî¥ MEJORABLE: Sistema necesita optimizaci√≥n para bull markets")
        print()

def main():
    """Funci√≥n principal"""
    backtest = Bitcoin2024Backtest(initial_capital=1000)
    backtest.backtest_2024_complete()

if __name__ == "__main__":
    main()

